{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ByteHouse Ecosystem","text":""},{"location":"#work-in-progress","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"airbyte/clickhouse-java-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"airflow/clickhouse-connect-python-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"c%23/clickhouse-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"datax/clickhouse-java-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"dbt/clickhouse-connect-python-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"dolphinscheduler/bytehouse-java-tcp/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"dolphinscheduler/clickhouse-java-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"golang/bytehouse-tcp/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"java/bytehouse-tcp/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"java/clickhouse-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"mybatis/clickhouse-java-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"php/clickhouse-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"php/clickhouse-tcp/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"powerbi/clickhouse-odbc-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"python/bytehouse-tcp/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"python/clickhouse-connect-http/","title":"ClickHouse Connect (HTTP)","text":""},{"location":"python/clickhouse-connect-http/#overview","title":"Overview","text":"Description Details Github Repository GitHub - clickhouse-connect ClickHouse Documentation Page ClickHouse Docs Base ClickHouse Connect Version 0.8.6 Verified Python Version Python 3.8"},{"location":"python/clickhouse-connect-http/#installation","title":"Installation","text":"<p>The package can be installed via <code>pip</code>: <pre><code>pip install clickhouse-connect\n</code></pre> Optionally, you can install <code>cython</code> package to build and enable the C/Cython optimizations <pre><code>pip install cython\n</code></pre></p>"},{"location":"python/clickhouse-connect-http/#client-construction","title":"Client Construction","text":""},{"location":"python/clickhouse-connect-http/#1-passing-parameters","title":"1. Passing parameters","text":"<pre><code>import clickhouse_connect\n\nclient = clickhouse_connect.get_client(\n    host=\"gateway-v2.bytehouse-cn-{REGION}.volces.com\",\n    port=8123,\n    username=\"bytehouse\",\n    password=\"{API_KEY}\",\n    database=\"{DATABASE}\",\n    secure=True,\n)\n</code></pre>"},{"location":"python/clickhouse-connect-http/#2-passing-connection-string","title":"2. Passing connection string","text":"<p>TODO</p>"},{"location":"python/clickhouse-driver-tcp/","title":"ClickHouse Driver (TCP)","text":""},{"location":"python/clickhouse-driver-tcp/#overview","title":"Overview","text":"Description Details Github Repository GitHub - clickhouse-driver ClickHouse Documentation Page ClickHouse Docs Base ClickHouse Driver Version 0.2.9 Verified Python Version Python 3.8"},{"location":"python/clickhouse-driver-tcp/#installation","title":"Installation","text":"<p><code>gcc</code>, <code>python</code> and <code>linux</code> headers are required to build the driver. Example for <code>python:alpine</code> docker image: <pre><code>apk add gcc musl-dev\n</code></pre> The package can be installed via <code>pip</code>: <pre><code>pip install clickhouse-driver\n</code></pre></p>"},{"location":"python/clickhouse-driver-tcp/#client-construction","title":"Client Construction","text":""},{"location":"python/clickhouse-driver-tcp/#1-passing-parameters","title":"1. Passing parameters","text":"<pre><code>from clickhouse_driver import Client\n\nclient = Client(\n    host=\"gateway-v2.bytehouse-cn-{REGION}.volces.com\",\n    port=19000,\n    user=\"bytehouse\",\n    password=\"{API_KEY}\",\n    database=\"{DATABASE}\",\n    secure=True,\n)\n</code></pre>"},{"location":"python/clickhouse-driver-tcp/#2-passing-connection-string","title":"2. Passing connection string","text":"<pre><code>from clickhouse_driver import Client\n\nuri = \"clickhouse://bytehouse:{API_KEY}@gateway-v2.bytehouse-cn-{REGION}.volces.com:19000/{DATABASE}?secure=True\"\nclient = Client.from_url(uri)\n</code></pre>"},{"location":"python/clickhouse-driver-tcp/#quickstart","title":"Quickstart","text":""},{"location":"python/clickhouse-driver-tcp/#data-types","title":"Data Types","text":""},{"location":"python/clickhouse-driver-tcp/#specifying-server-settings","title":"Specifying Server Settings","text":""},{"location":"python/clickhouse-driver-tcp/#specifying-query-id","title":"Specifying Query ID","text":"<pre><code>from clickhouse_driver import Client\n\n# client = Client(...) # Initialize client\n\nquery_id = \"bbd7dea3-eb63-4a21-b727-f55b420a7223\"\nclient.execute(\"SELECT 1\", query_id=query_id)\n</code></pre>"},{"location":"python/clickhouse-driver-tcp/#inserting-data-from-pandas-dataframe","title":"Inserting data from Pandas dataframe","text":"<p><code>'use_numpy': True</code> setting is required for Numpy / Pandas package support. <pre><code>from clickhouse_driver import Client\nimport pandas as pd\n\nclient = Client(\n    host=\"gateway-v2.bytehouse-cn-{REGION}.volces.com\",\n    port=19000,\n    user=\"bytehouse\",\n    password=\"{API_KEY}\",\n    database=\"{DATABASE}\",\n    secure=True,\n    settings={\"use_numpy\": True},\n)\n\nclient.execute(\n   'CREATE TABLE test_df (x Int, y String) Engine = CnchMergeTree() ORDER BY tuple()'\n)\n\ndf_insert = pd.DataFrame({\n    'x': [1, 2],\n    'y': ['apple', 'banana'],\n}, dtype=object)\n\nclient.insert_dataframe('INSERT INTO test_df VALUES', df_insert)\n\ndf_select = client.query_dataframe('SELECT * FROM test_df')\n\nprint(df_select)\n\n#    x       y\n# 0  1   apple\n# 1  2  banana\n</code></pre></p>"},{"location":"python/clickhouse-driver-tcp/#inserting-data-from-csv-file","title":"Inserting data from CSV file","text":"<pre><code>from csv import DictReader\nfrom datetime import datetime\n\nfrom clickhouse_driver import Client\n\n# client = Client(...) # Initialize client\n\ndef iter_csv(filename):\n    converters = {\n        'time': lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S'),\n        'order': str,\n        'qty': int,\n    }\n    with open(filename, 'r') as f:\n        reader = DictReader(f)\n        for line in reader:\n            yield {k: (converters[k](v) if k in converters else v) for k, v in line.items()}\n\n\nclient.execute(\n    'CREATE TABLE IF NOT EXISTS data_csv (time DateTime, order String, qty Int32) Engine = CnchMergeTree() ORDER BY tuple()'\n)\nclient.execute('INSERT INTO data_csv VALUES', iter_csv('data.csv'))\n</code></pre>"},{"location":"python/clickhouse-driver-tcp/#query-data-based-on-column-names","title":"Query data based on Column Names","text":""},{"location":"sqlalchemy/clickhouse-connect-python-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"superset/clickhouse-connect-python-http/","title":"Superset via ClickHouse Connect (HTTP)","text":""},{"location":"superset/clickhouse-connect-python-http/#overview","title":"Overview","text":"Description Details Superset Official Documentation Page Superset Docs ClickHouse Documentation Page ClickHouse Docs Base Superset Version 4.1.0 Base ClickHouse Connect Version 0.8.6 ByteHouse Connect Version 0.8.6+bytehouse Verified Python Version Python 3.8"},{"location":"superset/clickhouse-connect-python-http/#installation","title":"Installation","text":"<p><code>ByteHouse</code> cannot natively support <code>Superset</code> via <code>ClickHouse Connect</code>. We require some additional modifications to the <code>ClickHouse Connect</code> package. Modified version is available here ByteHouse modified connector. </p> <p>You can install it via <code>pip</code>: <pre><code>pip install https://github.com/bytehouse-docs/ecosystem/raw/main/dist/clickhouse-connect/clickhouse-connect-0.8.6+bytehouse.tar.gz\n</code></pre></p> <p>The complete installation instructions can be found in the <code>Superset</code> official documentation Page. Installation via  <code>Docker</code> is given below for quick reference: <pre><code>git clone https://github.com/apache/superset.git\ncd superset\ngit checkout 4.1.0\necho \"https://github.com/bytehouse-docs/ecosystem/raw/main/dist/clickhouse-connect/clickhouse-connect-0.8.6+bytehouse.tar.gz\" &gt;&gt; ./requirements/local.txt\ndocker compose -f docker-compose-image-tag.yml up\n</code></pre></p>"},{"location":"superset/clickhouse-connect-python-http/#log-into-superset","title":"Log into Superset","text":"<p>Once the installation is complete, you can log into <code>Superset</code> by visiting <code>http://localhost:8088</code> in your browser with the default created account: <pre><code>username: admin\npassword: admin\n</code></pre></p>"},{"location":"superset/clickhouse-connect-python-http/#connect-superset-to-bytehouse","title":"Connect Superset to ByteHouse","text":"<ol> <li>Click on the <code>Settings</code> tab in the top right corner of the screen &amp; choose <code>Database Connections</code>. </li> <li>Click on the <code>+ DATABASE</code> button to create a new database connection. </li> <li>Choose <code>ClickHouse Connect (SuperSet)</code> from the available databases' dropdown menu. </li> <li>Fill in the connection details as shown below &amp; click on the <code>CONNECT</code> button.</li> </ol> Description Details HOST gateway-v2.bytehouse-cn-{REGION}.volces.com PORT 19000 DATABASE NAME Database name USERNAME bytehouse PASSWORD ByteHouse API Key DISPLAY NAME Display name as you want ADDITIONAL PARAMETERS secure=True&amp;compress=False SSL Needs to be turned on"},{"location":"superset/clickhouse-connect-python-http/#prepare-sample-data","title":"Prepare Sample Data","text":"<p>Execute following queries in <code>ByteHouse</code> to prepare sample data. You can execute these queries via  <code>ByteHouse Console</code> or <code>Superset SQL Lab</code>. <pre><code>CREATE DATABASE test_db;\n\nCREATE TABLE test_db.online_store_sales (\n    order_id String,\n    order_date DateTime,\n    customer_id String,\n    product_id String,\n    category String,\n    sub_category String,\n    region String,\n    sales_amount Float64,\n    quantity UInt32\n) \nENGINE = CnchMergeTree()\nPARTITION BY toYYYYMM(order_date)\nORDER BY (order_date, customer_id);\n\nINSERT INTO test_db.online_store_sales VALUES\n('OID001', '2024-11-01 10:00:00', 'CID001', 'PID001', 'Electronics', 'Smartphones', 'North America', 899.99, 2),\n('OID004', '2024-11-02 09:20:00', 'CID004', 'PID004', 'Furniture', 'Desks', 'North America', 1599.99, 5),\n('OID005', '2024-11-02 14:10:00', 'CID005', 'PID005', 'Home Decor', 'Lamps', 'South America', 49.99, 100),\n('OID006', '2024-11-02 17:50:00', 'CID006', 'PID006', 'Electronics', 'Tablets', 'Europe', 799.99, 7),\n('OID007', '2024-11-03 11:00:00', 'CID007', 'PID007', 'Clothing', 'Jackets', 'Asia', 149.99, 25),\n('OID008', '2024-11-03 13:40:00', 'CID008', 'PID008', 'Clothing', 'Shoes', 'Africa', 89.99, 50),\n('OID010', '2024-11-04 19:30:00', 'CID010', 'PID010', 'Electronics', 'Cameras', 'North America', 399.99, 3),\n('OID013', '2024-11-05 08:50:00', 'CID013', 'PID013', 'Electronics', 'Headphones', 'North America', 99.99, 100),\n('OID014', '2024-11-05 11:30:00', 'CID014', 'PID014', 'Furniture', 'Coffee Tables', 'Asia', 499.99, 50),\n('OID015', '2024-11-05 14:00:00', 'CID015', 'PID015', 'Clothing', 'T-Shirts', 'Europe', 19.99, 300),\n('OID016', '2024-11-06 09:40:00', 'CID016', 'PID016', 'Furniture', 'Bookshelves', 'North America', 999.99, 10),\n('OID017', '2024-11-06 13:25:00', 'CID017', 'PID017', 'Electronics', 'Laptops', 'Europe', 2299.99, 4),\n('OID020', '2024-11-07 14:00:00', 'CID020', 'PID020', 'Home Decor', 'Rugs', 'Africa', 199.99, 20);\n</code></pre></p>"},{"location":"superset/clickhouse-connect-python-http/#create-superset-dataset","title":"Create Superset Dataset","text":"<ol> <li>Click on the <code>+</code> button in the top right corner of the screen &amp; choose <code>Data</code> &amp; choose <code>Create dataset</code>. </li> <li>Choose <code>DATABASE</code>, <code>SCHEMA</code> &amp; <code>TABLE</code> from the dropdown menu &amp; click on the <code>CREATE DATASET AND CREATE CHART</code> button. </li> </ol>"},{"location":"superset/clickhouse-connect-python-http/#create-superset-chart","title":"Create Superset Chart","text":"<ol> <li>From <code>Charts</code> tab, choose the previously created dataset &amp; choose <code>Line Chart</code> as chart type. Proceed to click on  the <code>CREATE NEW CHART</code> button. </li> <li>Choose <code>order_date</code> column as <code>X-AXIS</code>, <code>Day</code> as <code>TIME GRAIN</code> &amp; <code>COUNT(*)</code> as <code>METRIC</code>. Proceed to click on the  <code>CREATE CHART</code> button. </li> <li>The chart will be displayed as shown below. </li> </ol>"},{"location":"tableau/clickhouse-java-http/","title":"Work in Progress","text":"<p>This page is currently under construction. Please check back later for updates!</p> <p>Thank you for your patience.</p>"},{"location":"troubleshooting/python/","title":"Troubleshooting Guide for Python Clients","text":""},{"location":"troubleshooting/python/#1-clickhouse_drivererrorsnetworkerror-code-210-connection-reset-by-peer","title":"1. clickhouse_driver.errors.NetworkError: Code: 210. Connection reset by peer","text":"<p>By default, <code>clickhouse-driver</code> uses non-secure <code>TCP</code> connection, which would throw this error. We need to add  <code>secure=True</code> to the client constructor to use secure connection.</p> <p><pre><code>client = Client(\n    ### other parameters\n    secure=True,\n)\n</code></pre> Some other error messages that might indicate the same issue: - <code>clickhouse_driver.errors.NetworkError: Code: 210. Connection reset by peer</code> - <code>Error on socket shutdown: [Errno 57] Socket is not connected</code> - <code>ConnectionResetError: [Errno 54] Connection reset by peer</code></p>"},{"location":"troubleshooting/python/#2-clickhouse_drivererrorsunexpectedpacketfromservererror-code-102-unexpected-packet-from-server","title":"2. clickhouse_driver.errors.UnexpectedPacketFromServerError: Code: 102. Unexpected packet from server","text":"<p>This error is thrown when wrong port number is used in the client constructor. For TCP, the port is <code>19000</code> and for  HTTP, the port is <code>8123</code>.</p> <p>Some other error messages that might indicate the same issue: - <code>clickhouse_driver.errors.UnexpectedPacketFromServerError: Code: 102. Unexpected packet from server</code> - <code>expected Hello or Exception, got Unknown packet</code></p>"},{"location":"troubleshooting/python/#3-receive-pw-openapiauth-hello-error-fullusername-should-be-in-the-format-accountidfullusername-or-accountnamefullusername","title":"3. receive pw openapiauth hello error: fullUsername should be in the format 'accountID::fullUsername' OR 'accountName::fullUsername'","text":"<p>This error is thrown when the username is not correct. For API key authentication, the username should always be <code>bytehouse</code>.</p>"},{"location":"troubleshooting/python/#4-clickhouse_connectdriverexceptionsoperationalerror-error-connection-aborted-connectionreseterror54-connection-reset-by-peer","title":"4. clickhouse_connect.driver.exceptions.OperationalError: Error ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))","text":"<p>By default, <code>clickhouse-connect</code> uses non-secure <code>HTTP</code> connection, which would throw this error. We need to add  <code>secure=True</code> to the client constructor to use secure connection. <pre><code>client = clickhouse_connect.get_client(\n    ### other parameters\n    secure=True,\n)\n</code></pre> Some other error messages that might indicate the same issue: - <code>clickhouse_connect.driver.exceptions.OperationalError: Error ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))</code> - <code>urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))</code> - <code>ConnectionResetError: [Errno 54] Connection reset by peer</code></p>"}]}